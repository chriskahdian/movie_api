$ git add .
$ git commit -m "commit message"
$ heroku create
$ git push
$ git push heroku master

$ heroku restart


$parcel src/index.html - in client folder

2020-10-30
meeting w Sammy
questions - 
-localhost:1234 doesn't display list of movies
-localhost:1234 - is that supposed to display the main-view? why does main-view get a port? 
-should I use the build tool again before pushing changes to heroku?

-add to database movies url for image, description 

2020-11-01-1710: got button on movie-view, need to hook it up to change state to go back to main

2020-11-02-1144: trying to figure out how to wire the button to change the state. have found the following relevant code:
-"main-view.jsx":
onMovieClick(movie) {
    this.setState({
        selectedMovie: movie
    });
}
-maybe I can define that as a function, before using it on the onClick part?
: movies.map(movie => (<MovieCard key={movie._id} movie={movie} onClick={movie => this.onMovieClick(movie)}/>))
-another example of onClick:
<div onClick={() => onClick(movie)} className="movie-card">{movie.Title}</div>
-and the one above uses main-view's onClick method to change the state etc. the problem is, this button isn't going to be something defined on main-view, so it wont be able to use that function; so it'll have to use it in the same file, the movie-view file. Okay, sure, so I need to include that somewhere, and then wire up the button to change the state; but then, will it still change the page... because there must be another function using the state...
-wait but what tells it to go to movie view though... "main-view.jsx":
            { selectedMovie
                ? <MovieView movie={selectedMovie}/>
                : movies.map(movie => (
                <MovieCard key={movie._id} movie={movie} onClick={movie => this.onMovieClick(movie)}/>
                ))
            }
-so what is all that code about... finding and re-reading
-oh, that's all within the render function; and it's conditional. so maybe I just have to copy/paste that part into the movie-view's render function
-and now, what if it's just render main view... just put main-view in the render function of the movie-view
-okay so, in the render() for main-view, there's this:
render() {
        const {movie} = this.props;
        if (!movie) return null;
        return( //movie view)
-so... just that null there.... that's what I have to change
-and the button just has to change "(movie)", make it so there's !movie
-check others' to see if their's show render null changed to render (something)
-Sammy's is null. shoot all 4 of the other ones too say null. okay well, good time to start looking at their codes I guess...
-do all 5 use react-bootstrap: 4 do, the other 1 looks like a previous version of 1 of those 4
-soooo... well it doesn't say anything about react-bootstrap in here...
-oh okay, this one guy did it like this, inside the render function inside the movie-view:
return(
      <div>
            // other stuff
            <Link to={`/`}>
              <Button variant="link">Back</Button>
            </Link>
      </div>
    )
-and he had imported {link} from something else. So, I think I can just... figure out how to make a link in regular old w/e
import { Link } from "react-router-dom"
-the button just has to be a link to '/'
-okay fine, what did the second one do then...
-3 of them actually used the link method
-Sammy's did something else I don't understand
-BUT - none of them seem to change the state, like the instructions say...
-Sammy's in "main-view.jsx":
  buttonFunc() {
    this.setState({
      selectedMovie: null,
    });
  }
-Sammy's in "movie-view.jsx"
render() {
//...
    const { movie, buttonPropFromMain, label } = this.props;
//...
            <MovieView
              movie={selectedMovie}
              buttonPropFromMain={() => this.buttonFunc()}
              label="Return"
            />
//...
        <Button variant="light" onClick={buttonPropFromMain}>{label}</Button>
-okay so, he's putting it in the render section of main-view...
-and "it" is gathering all the things it's going to send to MovieView, which includes now that buttonPropFromMain
-what that thing does is call the buttonFunc:
  buttonFunc() {
    this.setState({
      selectedMovie: null,
    });
  }
-which was in main-view, which sets the state back to null so that main-view displays.
-okay so to summarize:
  -function declared in main-view: buttonFunc: changes state
  -main-view has MovieView section where it gathers things to send to movie-view
  -main-view includes in items to send, buttonFunc, as buttonPropFromMain
  -movie-view has button, includes an onClick that triggers buttonFunc

2020-11-03-1151
-okay, so, to summarize:
  X -main-view: buttonFunc: changes state; put right before render()
  X -main-view: MovieView section: things to send: buttonFunc, as buttonPropFromMain
  X -movie-view: button with onClick that triggers buttonFunc
  X -movie-view: render(): include buttonPropFromMain in const {...}
-running app first to see if it actually works - and yeah, it works
-YEAH IT WORKS!!!!!!!!!!!!!!!!!!!!!!!!!!

2020-11-03-1500 meeting w Sammy
-add to database movies url for image, description
X -review rest of database; some things (title) are missing in movie-view in app - FIXED had variable name wrong

2020-11-04-1053
-working through 3.4 all day

2020-11-04-1752
-creating login-view file; updated w useState; created temp login situation
-implementing login-view code on main-view
-implementing prop-types
-stuck on getting app to work at this point. console log gives an error when I try to log in w fake credentials like the text says: _this3.onLoggedIn is not a function. not sure how to handle... reviewed code several times

2020-11-06-1213: started for the day
2020-11-06-1255: found what was wrong; was missing the following in main-view, right before render function:
    onLoggedIn(user) {
        this.setState({
            user
        });
    }
-it did say function was undefined... but I thought it was saying that and matching up what was in the lesson, cus the text also says there should be that error. But I guess for a different reason than  just not defining it, like I did

2020-11-06-1613: pausing on the lesson to actually fix up the database:
-add to database movies url for image, description
2020-11-06-1643: done with that
2020-11-06-1705: hard studying; got to task, closing down

2020-11-07-1020: working on registration-view
-was able to make the actual component, but need to find a way to integrate into main-view. Sammy's example does ctrl+f anything for "reg" in main-view
-Sammy - turn in task without integrating registration-view to main-view

2020-11-09-1203: starting 3.5
-followed to a point where I updated the login-view and was asked to log in with an incorrect user to see the error, which I did; then I was to try logging in with an existing user, which I did, and it's still returning an error (found user from database);
-checking login-view updated code...
-still going over it but I want to also check the API endpoints in the index.js file
-oh wait dude look. the api url. https://myflix001.herokuapp.com/login. I should change that to localhost:1234
-okay, none of that worked..... would have been nice.
-well then what if I set it up in Heroku to troubleshoot it there...
-what if I change the url to nothing - okay it still says no such user
-okay but in the example though they have the url as localhost so yeah gonna change that
-I'm going to try manually adding in a user into the database and see if it works.
-nope, username test password test doesn't work that way...
-okay to summarize so far: 
-can't log in;
-changed API URL from heroku to local;
-reviewed code, found nothing wrong;
-manually added user/pass to db, didn't work;
-will try rolling back login to generic, getting it from my github's last task commit
-okay yeah it works with the last's ones still... hmm.
-so it just has to be something in the code...
-so now I'm comparing the 3.4 and 3.5 versions to see what I can find that might be important
-what if it's the form; try using the form from 3.4; it's the return() part of the function
-no it still does the same thing.
-okay but now the problem is isolated here, in this clause:
    const handleSubmit = (e) => {
        e.preventDefault();
        axios.post('http://localhost:1234/login', {
            Username: username,
            Password: password
        })
        .then(response => {
            const data = response.data;
            props.onLoggedIn(data);
        })
        .catch(e => {
            console.log('no such user')
        });
    };
-okay gonna break here
-2020-11-09-1709: what if I change "data" back to "username"... in props.onLoggedIn()
-nnnnope, still nothing...
-gonna try testing it with postman...
-nothing new. tried with localhost and heroku. heroku works as expected, and I might be able to see it's logs if I update and push the app there...
-updating heroku
-still doesn't work. testing through postman. with test test, it says wrong password; with test1 test, it says wrong username, so it detects usernames.
-I guess I'm going to try one of the weird ones that was all mashed up...
Username
:
"sammy2"
Password
:
"$2b$10$bKkpzfPy1v2nh8w8U/H4zunUZsAUL/W1oMRBSMD6eTMuGMyh5.iO2"
-nope, still doesn't work...

-2020-11-10-1126: summarize where I'm stuck and what I've done to try to fix:
-can't log in;
-changed API URL from heroku to local;
-reviewed code, found nothing wrong;
-manually added user/pass to db, didn't work;
-tried using 3.4's version of login-view, it works;
-3.4's version works with 3.5's version of login-view, so:
-problem is in handleSubmit;
-tried changing props.onLoggedIn() to username instead of data, didn't work;
-tested with postman and heroku to check heroku's logs; with a valid username, it says wrong password; with an invalid username, it says invalid username; so:
-Heroku logs show it can detect the username at least
-QUESTION - can I see parcel's logs how I can see heroku's?
-no
-meeting with Sammy
-couldn't log in because it needed a hashed password. created a new user in postman and it hashed the password then we were able to log in with that.
-rcc + enter - inserts blank class object named after file
-control + d - way of selecting multiple things in VSCode; highlight your selection then press ctrl+d and it'll select the next one also for you.
-2020-11-10-1845: now just going to continue on in the lesson

-2020-11-12-1230: task for 3.5:
-create director view
-create genre view
-create profile view
-add "delete user" functionality
X -display favorites
-add "delete favorite" functionality

-adding genre-view: so I've opened all the versions of the movie_api in Sammy's github I could find and they're all slightly different which makes them useful for seeing what they have in common, 5 genre-view files and 5 director-view files
-they can get started with the rcc + enter trick Sammy showed me, naming the item GenreView from genre-view...
-all 5 verisons add empty array for state
-all 5 versions have:
render () { 
  const { movie, genre } = this.props
  if (!genre) return null;
  return (
    <div>
      <Container>
        <Card>
          <Card.Body>
            <Card.Title>{genre.Name}</Card.Title>
            <Card.Text>Description: {genre.Description}</Card.Text>
            <Link to={'/'}><button>Back</button></Link>
          </Card.Body>
        </Card>
      </Container>
    </div>
  )}
-okay so I have the genre-view now, sure, but I gotta implement it onto the movie view...
-5 versions of movie-view available on Sammy's github... 4 of them seem pretty behind, 1 of them is about as complex as mine
-1 of them has the following:
Render(){
  //...
  return(
    //...
    <div className="movie-genre">
      <span className="label"Description: </span>
      <Link className="porition-relative" to={'/genres/${movie.Genre.Name}'}>
        <button>{movie.Genre.Name}</button>
      </Link>
    </div>
    //...
  )
}
-wait, omg I already have this in here, for both genre and director lol. the links on the buttons on the movie-view page
-okay I can test it out then with Genre